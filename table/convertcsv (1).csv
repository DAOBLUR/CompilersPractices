FIRST,FOLLOW,Nonterminal,func,(,),{,},ε,main,id,comma,var,=,exec,if,elif,else,while,for,return,//,text,/*,*/,jump,+,-,*,/,<,>,==,<=,>=,!=,&,|,string,null,int,float,true,false,$
"{func,ε}",{$},Program,Program -> FunctionDeclaration' MainFunction,,,,,Program -> FunctionDeclaration' MainFunction,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{func},{main},FunctionDeclaration,FunctionDeclaration -> func FunctionName ( Parameters ) { Statements } FunctionDeclaration',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{func,ε}",{main},FunctionDeclaration',FunctionDeclaration' -> FunctionDeclaration,,,,,FunctionDeclaration' -> ε,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{main},{$},MainFunction,,,,,,,MainFunction -> main ( ) { Statements },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{id},{(},FunctionName,,,,,,,,FunctionName -> id,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{id,comma,ε}",{)},Parameters,,,,,,Parameters -> Parameters',,Parameters -> id Parameters',Parameters -> Parameters',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{comma,ε}",{)},Parameters',,,,,,Parameters' -> ε,,,Parameters' -> comma id Parameters',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{var,id,if,exec,return,//,/*,while,for}",{}},Statements,,,,,,,,Statements -> Statement Statements',,Statements -> Statement Statements',,Statements -> Statement Statements',Statements -> Statement Statements',,,Statements -> Statement Statements',Statements -> Statement Statements',Statements -> Statement Statements',Statements -> Statement Statements',,Statements -> Statement Statements',,,,,,,,,,,,,,,,,,,,,
"{ε,var,id,if,exec,return,//,/*,while,for}",{}},Statements',,,,,,Statements' -> ε,,Statements' -> Statement Statements',,Statements' -> Statement Statements',,Statements' -> Statement Statements',Statements' -> Statement Statements',,,Statements' -> Statement Statements',Statements' -> Statement Statements',Statements' -> Statement Statements',Statements' -> Statement Statements',,Statements' -> Statement Statements',,,,,,,,,,,,,,,,,,,,,
"{var,id,if,exec,return,//,/*,while,for}","{ε,var,id,if,exec,return,//,/*,while,for}",Statement,,,,,,,,Statement -> Assignment End,,Statement -> VariableDeclaration End,,Statement -> FunctionCall End,Statement -> Conditional,,,Statement -> Loop,Statement -> Loop,Statement -> ReturnStatement End,Statement -> Comment,,Statement -> Comment,,,,,,,,,,,,,,,,,,,,,
{var},{comma},VariableDeclaration,,,,,,,,,,VariableDeclaration -> var id = Expressions,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{id},{comma},Assignment,,,,,,,,Assignment -> id = Expressions,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{(,id,string,null,exec,int,float,true,false}","{comma,),ε,{,&,|}",Expressions,,Expressions -> Terms Expressions',,,,,,Expressions -> Terms Expressions',,,,Expressions -> Terms Expressions',,,,,,,,,,,,,,,,,,,,,,,,Expressions -> Terms Expressions',Expressions -> Terms Expressions',Expressions -> Terms Expressions',Expressions -> Terms Expressions',Expressions -> Terms Expressions',Expressions -> Terms Expressions',
"{ε,+,-,<,>,==,<=,>=,!=}","{comma,),ε,{,&,|}",Expressions',,,,,,Expressions' -> ε,,,,,,,,,,,,,,,,,,Expressions' -> ArithOperator Terms Expressions',Expressions' -> ArithOperator Terms Expressions',,,Expressions' -> ComparisonOperator Terms Expressions',Expressions' -> ComparisonOperator Terms Expressions',Expressions' -> ComparisonOperator Terms Expressions',Expressions' -> ComparisonOperator Terms Expressions',Expressions' -> ComparisonOperator Terms Expressions',Expressions' -> ComparisonOperator Terms Expressions',,,,,,,,,
"{(,id,string,null,exec,int,float,true,false}","{ε,+,-,<,>,==,<=,>=,!=}",Terms,,Terms -> Expression' Factor,,,,,,Terms -> Expression' Factor,,,,Terms -> Expression' Factor,,,,,,,,,,,,,,,,,,,,,,,,Terms -> Expression' Factor,Terms -> Expression' Factor,Terms -> Expression' Factor,Terms -> Expression' Factor,Terms -> Expression' Factor,Terms -> Expression' Factor,
"{ε,*,/}","{ε,+,-,<,>,==,<=,>=,!=}",Factor,,,,,,Factor -> ε,,,,,,,,,,,,,,,,,,,,Factor -> ArithOperator' Expression' Factor,Factor -> ArithOperator' Expression' Factor,,,,,,,,,,,,,,,
"{(,id,string,null,exec,int,float,true,false}","{ε,*,/}",Expression',,Expression' -> ( Expressions ),,,,,,Expression' -> id,,,,Expression' -> FunctionCall,,,,,,,,,,,,,,,,,,,,,,,,Expression' -> Value,Expression' -> Value,Expression' -> Value,Expression' -> Value,Expression' -> Value,Expression' -> Value,
{exec},"{comma,ε,*,/}",FunctionCall,,,,,,,,,,,,FunctionCall -> exec FunctionName ( SentParameters ),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{ε,(,id,string,null,exec,int,float,true,false}",{)},SentParameters,,SentParameters -> Expressions SentParameters',,,,SentParameters -> ε,,SentParameters -> Expressions SentParameters',,,,SentParameters -> Expressions SentParameters',,,,,,,,,,,,,,,,,,,,,,,,SentParameters -> Expressions SentParameters',SentParameters -> Expressions SentParameters',SentParameters -> Expressions SentParameters',SentParameters -> Expressions SentParameters',SentParameters -> Expressions SentParameters',SentParameters -> Expressions SentParameters',
"{comma,ε}",{)},SentParameters',,,,,,SentParameters' -> ε,,,SentParameters' -> comma Expressions SentParameters',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{if},"{ε,var,id,if,exec,return,//,/*,while,for}",Conditional,,,,,,,,,,,,,Conditional -> if Condition { Statements } Conditional',,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{ε,else,elif}","{ε,var,id,if,exec,return,//,/*,while,for}",Conditional',,,,,,Conditional' -> ε,,,,,,,,Conditional' -> ElseIf,Conditional' -> ElseIf,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{else,elif}","{ε,var,id,if,exec,return,//,/*,while,for}",ElseIf,,,,,,,,,,,,,,ElseIf -> Elif Else,ElseIf -> Else,,,,,,,,,,,,,,,,,,,,,,,,,,,
{elif},{else},Elif,,,,,,,,,,,,,,Elif -> elif Condition { Statements } Elif',,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{elif,ε}",{else},Elif',,,,,,Elif' -> ε,,,,,,,,Elif' -> Elif,,,,,,,,,,,,,,,,,,,,,,,,,,,,
{else},"{ε,var,id,if,exec,return,//,/*,while,for}",Else,,,,,,,,,,,,,,,Else -> else { Statements },,,,,,,,,,,,,,,,,,,,,,,,,,,
"{while,for}","{ε,var,id,if,exec,return,//,/*,while,for}",Loop,,,,,,,,,,,,,,,,Loop -> While,Loop -> For,,,,,,,,,,,,,,,,,,,,,,,,,
{while},"{ε,var,id,if,exec,return,//,/*,while,for}",While,,,,,,,,,,,,,,,,While -> while Condition { Statements },,,,,,,,,,,,,,,,,,,,,,,,,,
{for},"{ε,var,id,if,exec,return,//,/*,while,for}",For,,,,,,,,,,,,,,,,,For -> for Expressions comma Expressions For',,,,,,,,,,,,,,,,,,,,,,,,,
"{comma,{}","{ε,var,id,if,exec,return,//,/*,while,for}",For',,,,For' -> { Statements },,,,,For' -> comma Expressions { Statements },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{(,id,string,null,exec,int,float,true,false}",{{},Condition,,Condition -> Expressions Condition',,,,,,Condition -> Expressions Condition',,,,Condition -> Expressions Condition',,,,,,,,,,,,,,,,,,,,,,,,Condition -> Expressions Condition',Condition -> Expressions Condition',Condition -> Expressions Condition',Condition -> Expressions Condition',Condition -> Expressions Condition',Condition -> Expressions Condition',
"{ε,&,|}",{{},Condition',,,,,,Condition' -> ε,,,,,,,,,,,,,,,,,,,,,,,,,,,,Condition' -> LogicalOperator Condition,Condition' -> LogicalOperator Condition,,,,,,,
{return},{comma},ReturnStatement,,,,,,,,,,,,,,,,,,ReturnStatement -> return Expressions,,,,,,,,,,,,,,,,,,,,,,,,
"{//,/*}","{ε,var,id,if,exec,return,//,/*,while,for}",Comment,,,,,,,,,,,,,,,,,,,Comment -> // text,,Comment -> /* MultipleText */,,,,,,,,,,,,,,,,,,,,,
{text},{*/},MultipleText,,,,,,,,,,,,,,,,,,,,MultipleText -> text MultipleText',,,,,,,,,,,,,,,,,,,,,,
"{jump,ε}",{*/},MultipleText',,,,,,MultipleText' -> ε,,,,,,,,,,,,,,,,,MultipleText' -> jump MultipleText,,,,,,,,,,,,,,,,,,,
"{+,-}","{(,id,string,null,exec,int,float,true,false}",ArithOperator,,,,,,,,,,,,,,,,,,,,,,,,ArithOperator -> +,ArithOperator -> -,,,,,,,,,,,,,,,,,
"{*,/}","{(,id,string,null,exec,int,float,true,false}",ArithOperator',,,,,,,,,,,,,,,,,,,,,,,,,,ArithOperator' -> *,ArithOperator' -> /,,,,,,,,,,,,,,,
"{<,>,==,<=,>=,!=}","{(,id,string,null,exec,int,float,true,false}",ComparisonOperator,,,,,,,,,,,,,,,,,,,,,,,,,,,,ComparisonOperator -> <,ComparisonOperator -> >,ComparisonOperator -> ==,ComparisonOperator -> <=,ComparisonOperator -> >=,ComparisonOperator -> !=,,,,,,,,,
"{&,|}","{(,id,string,null,exec,int,float,true,false}",LogicalOperator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,LogicalOperator -> &,LogicalOperator -> |,,,,,,,
"{string,null,int,float,true,false}","{ε,*,/}",Value,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Value -> string,Value -> null,Value -> Number,Value -> Number,Value -> Boolean,Value -> Boolean,
"{int,float}","{ε,*,/}",Number,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Number -> int,Number -> float,,,
"{true,false}","{ε,*,/}",Boolean,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Boolean -> true,Boolean -> false,
{comma},"{ε,var,id,if,exec,return,//,/*,while,for}",End,,,,,,,,,End -> comma Jump,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"{jump,ε}","{ε,var,id,if,exec,return,//,/*,while,for}",Jump,,,,,,Jump -> ε,,,,,,,,,,,,,,,,,Jump -> jump Jump,,,,,,,,,,,,,,,,,,,