Program -> MainFunction
Program -> MainFunction FunctionDeclaration
Program -> FunctionDeclaration MainFunction FunctionDeclaration
Program -> ''
MainFunction -> func main ( ) { Statements }
FunctionDeclaration -> func FunctionName ( Parameters ) { Statements }
FunctionDeclaration -> func FunctionName ( Parameters ) { Statements } FunctionDeclaration
FunctionDeclaration -> func FunctionName ( ) { Statements }
FunctionDeclaration -> func FunctionName ( ) { Statements } FunctionDeclaration
FunctionName -> id
Parameters -> id
Parameters -> id , Parameters
Statements -> Statement
Statements -> Statement Statements
Statement -> VariableDeclaration
Statement -> Assignment
Statement -> Conditional
Statement -> Loop
Statement -> FunctionCall
Statement -> ReturnStatement
Statement -> Comment
VariableDeclaration -> var id = Expressions End
Assignment -> id = Expressions End
Expressions -> ( Expression )
Expressions -> Expression
Expression -> Value 
Expression -> id
Expression -> ArithExpression
Expression -> ComparisonExpression
Expression -> FunctionCall

ArithExpression -> Expressions ArithOperator Expressions
ComparisonExpression -> Expressions ComparisonOperator Expressions
FunctionCall -> FunctionName ( SentParameters ) End
FunctionCall -> FunctionName ( ) End

SentParameters -> Expressions
SentParameters -> Expressions , SentParameters
Conditional -> if Condition { Statements } ElseIf
Conditional -> if Condition { Statements }
ElseIf -> Else
ElseIf -> Elif Else
Elif -> elif Condition { Statements } 
Elif -> elif Condition { Statements } Elif
Else -> else { Statements }
Loop -> While
Loop -> For
While -> while Condition { Statements }
For -> for Expressions, Expressions { Statements }
For -> for Expressions, Expressions, Expressions { Statements }
Condition -> Expressions
Condition -> Expressions LogicalOperator Condition
ReturnStatement -> return Expressions End
Comment -> // text
Comment -> /* MultipleText */
MultipleText -> text
MultipleText -> text \n MultipleText
ArithOperator -> +
ArithOperator -> -
ArithOperator -> *
ArithOperator -> /
ComparisonOperator -> <
ComparisonOperator -> >
ComparisonOperator -> ==
ComparisonOperator -> <=
ComparisonOperator -> >=
ComparisonOperator -> !=
LogicalOperator -> &
LogicalOperator -> |
Value -> string
Value -> Number
Value -> Boolean
Value -> null
Number -> int
Number -> int . int
Boolean -> true
Boolean -> false
End -> ,
End -> Jump 
Jump -> , \n